1. WTForms笔记：
   这个库一般有两个作用。第一个就是做表单验证，把用户提交上来的数据进行验证是否合法。第二个就是做模版渲染。
	### 做表单验证：
	1. 自定义一个表单类，继承自wtforms.Form类。
	2. 定义好需要验证的字段，字段的名字必须和模版中那些需要验证的input标签的name属性值保持一致。
	3. 在需要验证的字段上，需要指定好具体的数据类型。
	4. 在相关的字段上，指定验证器。
	5. 以后在视图中，就只需要使用这个表单类的对象，并且把需要验证的数据，也就是request.form传给这个表单类，以后调用form.validate()方法，如果返回True，那么代表用户输入的数据都是合法的，否则代表用户输入的数据是有问题的。如果验证失败了，那么可以通过form.errors来获取具体的错误信息。
	示例代码如下：
	ReistForm类的代码：
	```python
	class RegistForm(Form):
	    username = StringField(validators=[Length(min=3,max=10,message='用户名长度必须在3到10位之间')])
	    password = StringField(validators=[Length(min=6,max=10)])
	    password_repeat = StringField(validators=[Length(min=6,max=10),EqualTo("password")])
	```
	视图函数中的代码：
	```python
	form = RegistForm(request.form)
	if form.validate():
	    return "success"
	else:
	    print(form.errors)
	    return "fail"
	```
	### 常用的验证器：
	数据发送过来，经过表单验证，因此需要验证器来进行验证，以下对一些常用的内置验证器进行讲解：
	1. Email：验证上传的数据是否为邮箱。
	2. EqualTo：验证上传的数据是否和另外一个字段相等，常用的就是密码和确认密码两个字段是否相等。
	3. InputRequir：原始数据的需要验证。如果不是特殊情况，应该使用InputRequired。
	3. Length：长度限制，有min和max两个值进行限制。
	4. NumberRange：数字的区间，有min和max两个值限制，如果处在这两个数字之间则满足。
	5. Regexp：自定义正则表达式。
	6. URL：必须要是URL的形式。
	7. UUID：验证UUID。

	### 自定义验证器：
	如果想要对表单中的某个字段进行更细化的验证，那么可以针对这个字段进行单独的验证。步骤如下：
	1. 定义一个方法，方法的名字规则是：`validate_字段名(self,filed)`。
	2. 在方法中，使用`field.data`可以获取到这个字段的具体的值。
	3. 如果数据满足条件，那么可以什么都不做。如果验证失败，那么应该抛出一个`wtforms.validators.ValidationError`的异常，并且把验证失败的信息传到这个异常类中。
	示例代码：
	```python
	captcha = StringField(validators=[Length(4,4)])
	    # 1234
	    def validate_captcha(self,field):
	        if field.data != '1234':
	            raise ValidationError('验证码错误！')
	```

2. 文件上传笔记：
	1. 在模版中，form表单中，需要指定`encotype='multipart/form-data'`才能上传文件。
	2. 在后台如果想要获取上传的文件，那么应该使用`request.files.get('avatar')`来获取。
	3. 保存文件之前，先要使用`werkzeug.utils.secure_filename`来对上传上来的文件名进行一个过滤。这样才能保证不会有安全问题。 
	4. 获取到上传上来的文件后，使用`avatar.save(路径)`方法来保存文件。、
	5. 从服务器上读取文件，应该定义一个url与视图函数，来获取指定的文件。在这个视图函数中，使用`send_from_directory(文件的目录,文件名)`来获取。
	示例代码如下：
	```python
	@app.route('/upload/',methods=['GET','POST'])
	def upload():
	    if request.method == 'GET':
	        return render_template('upload.html')
	    else:
	        # 获取描述信息
	        desc = request.form.get("desc")
	        avatar = request.files.get("avatar")
	        filename = secure_filename(avatar.filename)
	        avatar.save(os.path.join(UPLOAD_PATH,filename))
	        print(desc)
	        return '文件上传成功'

	@app.route('/images/<filename>/')
	def get_image(filename):
	    return send_from_directory(UPLOAD_PATH,filename)
	```


	### 对上传文件使用表单验证：
	1. 定义表单的时候，对文件的字段，需要采用`FileField`这个类型。
	2. 验证器应该从`flask_wtf.file`中导入。`flask_wtf.file.FileRequired`是用来验证文件上传是否为空。`flask_wtf.file.FileAllowed`用来验证上传的文件的后缀名。
	3. 在视图文件中，使用`from werkzeug.datastructures import CombinedMultiDict`来把`request.form`与`request.files`来进行合并。再传给表单来验证。
	示例代码如下：
	```python
	from werkzeug.datastructures import CombinedMultiDict
	form = UploadForm(CombinedMultiDict([request.form,request.files]))
	```

3.上下文：
	### Local对象：
	在`Flask`中，类似于`request`的对象，其实是绑定到了一个`werkzeug.local.Local`对象上。
	这样，即使是同一个对象，那么在多个线程中都是隔离的。类似的对象还有`session`以及`g`对象。

	### Thread Local对象：
	只要满足绑定到这个对象上的属性，在每个线程中都是隔离的，那么他就叫做`Thread Local`对象。


	### 应用上下文和请求上下文：
	应用上下文和请求上下文都是存放到一个`LocalStack`的栈中。和应用app相关的操作就必须要用到应用上下文，比如通过`current_app`获取当前的这个`app`。和请求相关的操作就必须用到请求上下文，比如使用`url_for`反转视图函数。
	1. 在视图函数中，不用担心上下文的问题。因为视图函数要执行，那么肯定是通过访问url的方式执行的，那么这种情况下，Flask底层就已经自动的帮我们把请求上下文和应用上下文都推入到了相应的栈中。
	2. 如果想要在视图函数外面执行相关的操作，比如获取当前的app(current_app)，或者是反转url，那么就必须要手动推入相关的上下文：
	    * 手动推入app上下文：
	        ```python
	        # 第一种方式：
	        app_context = app.app_context()
	        app_context.push()
	        # 第二种方式：
	        with app.app_context():
	            print(current_app)
	        ```
	    * 手动推入请求上下文：推入请求上下文到栈中，会首先判断有没有应用上下文，如果没有那么就会先推入应用上下文到栈中，然后再推入请求上下文到栈中：
	        ```python
	        with app.test_request_context():
	            print(url_for('my_list'))
	        ```

	### 为什么上下文需要放在栈中：
	1. 应用上下文：Flask底层是基于werkzeug，werkzeug是可以包含多个app的，所以这时候用一个栈来保存。
	   如果你在使用app1，那么app1应该是要在栈的顶部，如果用完了app1，那么app1应该从栈中删除。方便其他代码使用下面的app。
	2. 如果在写测试代码，或者离线脚本的时候，我们有时候可能需要创建多个请求上下文，
	   这时候就需要存放到一个栈中了。使用哪个请求上下文的时候，就把对应的请求上下文放到栈的顶部，用完了就要把这个请求上下文从栈中移除掉。


	### 保存全局对象的g对象：
	g对象是在整个Flask应用运行期间都是可以使用的。并且他也是跟request一样，是线程隔离的。
	这个对象是专门用来存储开发者自己定义的一些数据，方便在整个Flask程序中都可以使用。
	一般使用就是，将一些经常会用到的数据绑定到上面，以后就直接从g上面取就可以了，而不需要通过传参的形式，这样更加方便。


	### 常用的钩子函数：
	    在Flask中钩子函数是使用特定的装饰器装饰的函数。为什么叫做钩子函数呢，是因为钩子函数可以在正常执行的代码中，
	插入一段自己想要执行的代码。那么这种函数就叫做钩子函数。（hook）
	1. `before_first_request`：Flask项目第一次部署后会执行的钩子函数。
	2. `before_request`：请求已经到达了Flask，但是还没有进入到具体的视图函数之前调用。一般这个就是在视图函数之前，
	    我们可以把一些后面需要用到的数据先处理好，方便视图函数使用。
	3. `context_processor`：使用这个钩子函数，必须返回一个字典。这个字典中的值在所有模版中都可以使用。
	    这个钩子函数的函数是，如果一些在很多模版中都要用到的变量，那么就可以使用这个钩子函数来返回，而不用在每个视图函数中的`render_template`中去写，
	    这样可以让代码更加简洁和好维护。
	4. `errorhandler`：在发生一些异常的时候，比如404错误，比如500错误。那么如果想要优雅的处理这些错误，就可以使用`errorhandler`来出来。需要注意几点：
	    * 在errorhandler装饰的钩子函数下，记得要返回相应的状态码。
	    * 在errorhandler装饰的钩子函数中，必须要写一个参数，来接收错误的信息，如果没有参数，就会直接报错。
	    * 使用`flask.abort`可以手动的抛出相应的错误，比如开发者在发现参数不正确的时候可以自己手动的抛出一个400错误。
	示例代码如下：
	```python
	@app.errorhandler(404)
	def page_not_found(error):
	    return render_template('404.html'),404
	```

4.cookie笔记：
	### 什么是cookie：
	在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。cookie存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用cookie只能存储一些小量的数据。
	1. cookie有有效期：服务器可以设置cookie的有效期，以后浏览器会自动的清除过期的cookie。
	2. cookie有域名的概念：只有访问同一个域名，才会把之前相同域名返回的cookie携带给服务器。也就是说，访问谷歌的时候，不会把百度的cookie发送给谷歌。

	### flask操作cookie：
	1. 设置cookie：设置cookie是应该在Response的对象上设置。`flask.Response`对象有一个`set_cookie`方法，可以通过这个方法来设置`cookie`信息。
	在Chrome浏览器中查看cookie的方式：
	    * 右键->检查->Network->重新加载页面->找到请求，然后查看Response Headers中的cookie
	    * 点击url输入框左边的信息icon，然后找到相应的域名，再展开查看cookie。
	    * 在Chrome的设置界面->高级设置->内容设置->所有cookie->找到当前域名下的cookie。 
	2. 删除cookie：通过`Response.delete_cookie`，指定cookie的key，就可以删除cookie了。
	3. 设置cookie的有效期：
	    * max_age：以秒为单位，距离现在多少秒后cookie会过期。
	    * expires：为datetime类型。这个时间需要设置为格林尼治时间，也就是要距离北京少8个小时的时间。
	    * 如果max_age和expires都设置了，那么这时候以max_age为标准。
	    * max_age在IE8以下的浏览器是不支持的。expires虽然在新版的HTTP协议中是被废弃了，但是到目前为止，所有的浏览器都还是能够支持，所以如果想要兼容IE8以下的浏览器，那么应该使用expires，否则可以使用max_age。
	    * 默认的过期时间：如果没有显示的指定过期时间，那么这个cookie将会在浏览器关闭后过期。
	示例代码：
	```python
	@app.route('/')
	def hello_world():
	    resp = Response("知了课堂")
	    expires = datetime(year=2017,month=12,day=11,hour=16,minute=0,second=0)
	    # 使用expires参数，就必须使用格林尼治时间
	    # 要相对北京时间少8个小时
	    expires = datetime.now() + timedelta(days=30,hours=16)
	    # 在新版本的http协议中，expires参数视为被废弃
	    # max_age，在IE8一下的浏览器中是不支持的
	    # resp.set_cookie('username','zhiliao',expires=expires,max_age=60)
	    resp.set_cookie('username','zhiliao')
	    return resp
	```
	4. 设置cookie的有效域名：cookie默认是只能在主域名下使用。如果想要在子域名下使用，那么应该给`set_cookie`传递一个`domain='.hy.com'`，这样其他子域名才能访问到这个cookie信息。


	### session：
	1. session的基本概念：session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，session是一个思路、一个概念、一个服务器存储授权信息的解决方案，不同的服务器，不同的框架，不同的语言有不同的实现。虽然实现不一样，但是他们的目的都是服务器为了方便存储数据的。session的出现，是为了解决cookie存储数据不安全的问题的。
	2. session与cookie的结合使用：
	    * session存储在服务器端：服务器端可以采用mysql、redis、memcached等来存储session信息。原理是，客户端发送验证信息过来（比如用户名和密码），服务器验证成功后，把用户的相关信息存储到session中，然后随机生成一个唯一的session_id，再把这个session_id存储cookie中返回给浏览器。浏览器以后再请求我们服务器的时候，就会把这个session_id自动的发送给服务器，服务器再从cookie中提取session_id，然后从服务器的session容器中找到这个用户的相关信息。这样就可以达到安全识别用户的需求了。
	    * session存储到客户端：原理是，客户端发送验证信息过来（比如用户名和密码）。服务器把相关的验证信息进行一个非常严格和安全的加密方式进行加密，然后再把这个加密后的信息存储到cookie，返回给浏览器。以后浏览器再请求服务器的时候，就会自动的把cookie发送给服务器，服务器拿到cookie后，就从cookie找到加密的那个session信息，然后也可以实现安全识别用户的需求了。


	### flask操作session：
	1. 设置session：通过`flask.session`就可以操作session了。操作`session`就跟操作字典是一样的。`session['username']='zhiliao'`。
	2. 获取session：也是类似字典，`session.get(key)`。
	3. 删除session中的值：也是类似字典。可以有三种方式删除session中的值。
	    * `session.pop(key)`。
	    * `del session[key]`。
	    * `session.clear()`：删除session中所有的值。
	4. 设置session的有效期：如果没有设置session的有效期。那么默认就是浏览器关闭后过期。如果设置session.permanent=True，那么就会默认在31天后过期。如果不想在31天后过期，那么可以设置`app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hour=2)`在两个小时后过期。

5.Flask-Restful笔记：
	### 安装：
	Flask-Restful需要在Flask 0.8以上的版本，在Python2.6或者Python3.3上运行。通过pip install flask-restful即可安装。

	### 基本使用：
	1. 从`flask_restful`中导入`Api`，来创建一个`api`对象。
	2. 写一个视图函数，让他继承自`Resource`，然后在这个里面，使用你想要的请求方式来定义相应的方法，比如你想要将这个视图只能采用`post`请求，那么就定义一个`post`方法。
	3. 使用`api.add_resource`来添加视图与`url`。
	示例代码如下：
	```python
	class LoginView(Resource):
	    def post(self,username=None):
	        return {"username":"zhiliao"}

	api.add_resource(LoginView,'/login/<username>/','/regist/')
	```
	注意事项：
	* 如果你想返回json数据，那么就使用flask_restful，如果你是想渲染模版，那么还是采用之前的方式，就是`app.route`的方式。
	* url还是跟之前的一样，可以传递参数。也跟之前的不一样，可以指定多个url。
	* endpoint是用来给url_for反转url的时候指定的。如果不写endpoint，那么将会使用视图的名字的小写来作为endpoint。


	### 参数验证：
	Flask-Restful插件提供了类似WTForms来验证提交的数据是否合法的包，叫做reqparse。以下是基本用法：
	    ```python
	    parser = reqparse.RequestParser()
	    parser.add_argument('username',type=str,help='请输入用户名')
	    args = parser.parse_args()
	    ```
	add_argument可以指定这个字段的名字，这个字段的数据类型等。以下将对这个方法的一些参数做详细讲解： 
	1. default：默认值，如果这个参数没有值，那么将使用这个参数指定的值。 
	2. required：是否必须。默认为False，如果设置为True，那么这个参数就必须提交上来。 3. type：这个参数的数据类型，如果指定，那么将使用指定的数据类型来强制转换提交上来的值。 
	4. choices：选项。提交上来的值只有满足这个选项中的值才符合验证通过，否则验证不通过。 
	5. help：错误信息。如果验证失败后，将会使用这个参数指定的值作为错误信息。 
	6. trim：是否要去掉前后的空格。

	其中的type，可以使用python自带的一些数据类型，也可以使用flask_restful.inputs下的一些特定的数据类型来强制转换。比如一些常用的： 
	1. url：会判断这个参数的值是否是一个url，如果不是，那么就会抛出异常。 
	2. regex：正则表达式。 
	3. date：将这个字符串转换为datetime.date数据类型。如果转换不成功，则会抛出一个异常。

6.Flask-restful笔记1：
	对于一个视图函数，你可以指定好一些字段用于返回。以后可以使用ORM模型或者自定义的模型的时候，他会自动的获取模型中的相应的字段，生成json数据，然后再返回给客户端。这其中需要导入flask_restful.marshal_with装饰器。并且需要写一个字典，来指示需要返回的字段，以及该字段的数据类型。示例代码如下：
	```python
	class ProfileView(Resource):
	    resource_fields = {
	        'username': fields.String,
	        'age': fields.Integer,
	        'school': fields.String
	    }

	    @marshal_with(resource_fields)
	    def get(self,user_id):
	        user = User.query.get(user_id)
	        return user
	```
	在get方法中，返回user的时候，flask_restful会自动的读取user模型上的username以及age还有school属性。组装成一个json格式的字符串返回给客户端。

	### 重命名属性：

	很多时候你面向公众的字段名称是不同于内部的属性名。使用 attribute可以配置这种映射。比如现在想要返回user.school中的值，但是在返回给外面的时候，想以education返回回去，那么可以这样写：
	```python
	resource_fields = {
	    'education': fields.String(attribute='school')
	}
	```

	### 默认值：
	在返回一些字段的时候，有时候可能没有值，那么这时候可以在指定fields的时候给定一个默认值，示例代码如下：
	```python
	resource_fields = {
	    'age': fields.Integer(default=18)
	}
	```

	### 复杂结构：
	有时候想要在返回的数据格式中，形成比较复杂的结构。那么可以使用一些特殊的字段来实现。比如要在一个字段中放置一个列表，那么可以使用fields.List，比如在一个字段下面又是一个字典，那么可以使用fields.Nested。以下将讲解下复杂结构的用法：
	```python
	class ArticleView(Resource):

	    resource_fields = {
	        'aritlce_title':fields.String(attribute='title'),
	        'content':fields.String,
	        'author': fields.Nested({
	            'username': fields.String,
	            'email': fields.String
	        }),
	        'tags': fields.List(fields.Nested({
	            'id': fields.Integer,
	            'name': fields.String
	        })),
	        'read_count': fields.Integer(default=80)
	    }

	    @marshal_with(resource_fields)
	    def get(self,article_id):
	        article = Article.query.get(article_id)
	        return article
	```


	### Flask-restful注意事项：
	1. 在蓝图中，如果使用`flask-restful`，那么在创建`Api`对象的时候，就不要再使用`app`了，而是使用蓝图。
	2. 如果在`flask-restful`的视图中想要返回`html`代码，或者是模版，那么就应该使用`api.representation`这个装饰器来定义一个函数，在这个函数中，应该对`html`代码进行一个封装，再返回。示例代码如下：
	```python
	@api.representation('text/html')
	def output_html(data,code,headers):
	    print(data)
	    # 在representation装饰的函数中，必须返回一个Response对象
	    resp = make_response(data)
	    return resp

	class ListView(Resource):
	    def get(self):
	        return render_template('index.html')
	api.add_resource(ListView,'/list/',endpoint='list')
	```

7.信号笔记：
	使用信号分为3步，第一是定义一个信号，第二是监听一个信号，第三是发送一个信号。以下将对这三步进行讲解：

	1. 定义信号：定义信号需要使用到blinker这个包的Namespace类来创建一个命名空间。
	   比如定义一个在访问了某个视图函数的时候的信号。示例代码如下：
	    ```python
	    # Namespace的作用：为了防止多人开发的时候，信号名字冲突的问题
	    from blinker import Namespace

	    mysignal = Namespace()
	    visit_signal = mysignal.signal('visit-signal')
	    ```
	2. 监听信号：监听信号使用singal对象的connect方法，在这个方法中需要传递一个函数，
	   用来接收以后监听到这个信号该做的事情。示例代码如下：
	    ```python
	    def visit_func(sender,username):
	        print(sender)
	        print(username)
	    mysignal.connect(visit_func)
	    ```
	3. 发送信号：发送信号使用singal对象的send方法，这个方法可以传递一些其他参数过去。示例代码如下：
	  ```python
	  mysignal.send(username='zhiliao')
	  ```

	### Flask内置的信号：
	1. template_rendered：模版渲染完成后的信号。
	2. before_render_template：模版渲染之前的信号。
	3. request_started：模版开始渲染。
	4. request_finished：模版渲染完成。
	5. request_tearing_down：request对象被销毁的信号。
	6. got_request_exception：视图函数发生异常的信号。一般可以监听这个信号，来记录网站异常信息。
	7. appcontext_tearing_down：app上下文被销毁的信号。
	8. appcontext_pushed：app上下文被推入到栈上的信号。
	9. appcontext_popped：app上下文被推出栈中的信号
	10. message_flashed：调用了Flask的`flashed`方法的信号。

