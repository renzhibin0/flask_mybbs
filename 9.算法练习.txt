
##########################链表练习###############################
1.反转链表
  """
  反转一个单链表。
  示例:
  输入: 1->2->3->4->5->NULL
  输出: 5->4->3->2->1->NULL
  """
    class ListNode:
      def __init__(self, x):
          self.val = x
          self.next = None

	class Solution:
	    def reverseList(self, head):
	        """
	        :type head: ListNode
	        :rtype: ListNode
	        """
	        cur, pre = head, None
	        while cur:
	            cur.next, cur, pre = pre, cur.next, cur
	        return prev

2.两两交换链表中的节点
  """
  给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。
示例:
给定 1->2->3->4, 你应该返回 2->1->4->3.
说明:
你的算法只能使用常数的额外空间。
你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。
  """
  	class ListNode:
        def __init__(self, x):
	        self.val = x
	        self.next = None

	class Solution:
	    def swapPairs(self, head):
	        """
	        :type head: ListNode
	        :rtype: ListNode
	        """
	        pre,pre.next = self,head
	        while pre.next and pre.next.next:
	            a = pre.next
	            b = a.next
	            pre.next,b.next,a.next = b,a,b.next
	            pre =a 

	        return self.next

3.判断一个链表是否有环
	给定一个链表，判断链表中是否有环。
	方法1：使用集合的方式
	class ListNode(object):
	    def __init__(self, x):
	        self.val = x
	        self.next = None

	class Solution(object):
	    def hasCycle(self, head):
	        """
	        :type head: ListNode
	        :rtype: bool
	        """
	        s = set()
	        pre = head
	        while pre:
	            if pre in s:
	                return True
                s.add(pre)
                pre = pre.next
	        return False
	方法2：快指针与慢指针
		def hasCycle(head):
			if not head:
				return False
			slow, fast = head
			while slow and fast and fast.next:
				if slow is fast:
					return True
				slow = slow.next
				fast = fast.next.next
			return False


###################字符串操作####################
1.给定一个字符串，找出不含有重复字符的最长子串的长度。
    示例 1:
	输入: "abcabcbb"
	输出: 3 
	解释: 无重复字符的最长子串是 "abc"，其长度为 3。

	示例 2:
	输入: "bbbbb"
	输出: 1
	解释: 无重复字符的最长子串是 "b"，其长度为 1。
	示例 3:
	输入: "pwwkew"
	输出: 3
	解释: 无重复字符的最长子串是 "wke"，其长度为 3。
	     请注意，答案必须是一个子串，"pwke" 是一个子序列 而不是子串。
	def lengthOfLongestSubstring( s):
        """
        :type s: str
        :rtype: int
        """
        start = max_len = 0
        used = {}
        
        for i,x in enumerate(s):
            if x in used and start <= used[x]:
                start = used[x] + 1
            else:
                max_len = max(max_len, i - start + 1)
            used[x] = i
            
        return max_len

##################栈练习###################
1.两数之和
  """
  给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。
  你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。
  示例:
  给定 nums = [2, 7, 11, 15], target = 9
  因为 nums[0] + nums[1] = 2 + 7 = 9
  所以返回 [0, 1]
  """
  	def twoSum(nums, target):
        hash_map = dict()
        for i,x in enumerate(nums):
            if target - x in hash_map:
                return [i,hash_map[target -x]]
            hash_map[x]=i       
 
2.有效的括号
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：
左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。
	def isValid(s):
        """
        :type s: str
        :rtype: bool
        """
        if not s:
            return True
        if len(s)==1:
            return False
        stack = []
        exist = {')':'(',']':'[','}':'{'}
        for i,c in enumerate(s):
            if c not in exist:
                stack.append(c)
            elif not stack or exist[c] != stack.pop():
                return False
        return not stack
